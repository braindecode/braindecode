# -*- coding: utf-8 -*-
"""Assignment_8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W9xx18khCjr0KogBTv1tK5VmDBqlUDku
"""

# The following tutorial will introduce to you how to work with the create_windows_from_events function.

# To get started, you should first import the needed packages. In this case, we need to install the braindecode package,
# and the moabb library, as we use this for the example.

#!pip install braindecode
#!pip install moabb

# After installing the packages, they are now available for use. As the current example will focus on the create_windows_from_events function,
# we will only import this function from the braindecode.preprocessing package.
# For the example dataset, we also import MOABBDataset from the braindecode.datasets package. This will provide our sample data.

from braindecode.datasets import MOABBDataset
from braindecode.preprocessing import create_windows_from_events

# To explore the parameter options accompanied by the function, we can directly access the doc.
# Here we find some information on the function itself, as well as a small explanation on the function.

print(create_windows_from_events.__doc__)

# To show how the function works, we need some data. For this we use the MOABDataset function, with a randomly selected subject.
# In this case, we use BCI Competition IV 2a data.
# If you would like to use your own data, you can import it either via MNE, or preprocessed numpy arrays.
subject_id = 3
dataset = MOABBDataset(dataset_name="BNCI2014_001", subject_ids=[subject_id])

# As the objective of this example is to show how the create_windows_from_events function works, some preprocessing steps are skipped.
# The dataset is already provided above, and should be a concat of base datasets
# each holding raw and description.

# Windows in the data are created using the function below.
# For exploration, all parameters are included in the function.
# To explain the effects of the function, we have included a couple of parameters which are easy to manipulate.
# Adjusting the window_size_samples parameter will cut windows in your chosen size.
# The window_stride_samples parameter determines the amount of overlap the windows can have with each other.
windows_dataset = create_windows_from_events(
    dataset,
    window_size_samples=None,
    window_stride_samples=None,
)

# The code below will give you the number of windows that are created.
print(f"Number of windows created: {len(windows_dataset)}")

# The code below changes the window size and window stride compared to the previous example.
windows_dataset = create_windows_from_events(
    dataset,
    window_size_samples=100,
    window_stride_samples=10,
)

# This piece of code will show you the changes in amount of windows created.
print(f"Number of windows created: {len(windows_dataset)}")

